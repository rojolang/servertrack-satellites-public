# Dynamic wildcard configuration for any domain
# This catches all subdomains for any domain and routes them dynamically

server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    http2 on;
    
    # Catch-all server name that captures domain and subdomain
    server_name ~^(?<subdomain>[^.]+)\.(?<domain>.+)$;
    
    # Default SSL certificate (will be replaced by your actual wildcard certs)
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    
    # Try to use domain-specific wildcard certificate if it exists
    ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Document root based on full subdomain.domain
    root /var/www/$subdomain.$domain;
    index index.html index.htm;
    
    # Handle click tracking - forward to tracking domain
    location /click/ {
        # Use dynamic tracking domain or fallback
        set $tracking_host "track.$domain";
        
        proxy_pass http://$tracking_host;
        proxy_set_header Host $tracking_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header User-Agent $http_user_agent;
        proxy_redirect off;
        proxy_buffering off;
        
        # Logging for click tracking
        access_log /var/log/nginx/$subdomain.$domain.clicks.log combined;
    }
    
    # Main location block
    location / {
        # Check if directory exists, if not return proper error
        try_files $uri $uri/ @not_provisioned;
    }
    
    # Handle non-provisioned subdomains
    location @not_provisioned {
        return 404 '{"error": "Subdomain not provisioned", "subdomain": "$subdomain", "domain": "$domain", "message": "This landing page has not been deployed yet."}';
        add_header Content-Type application/json;
    }
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Robots-Tag "noindex, nofollow" always;
    
    # Performance headers
    add_header Cache-Control "public, max-age=3600" always;
    
    # Dynamic logging
    access_log /var/log/nginx/$subdomain.$domain.access.log combined;
    error_log /var/log/nginx/$subdomain.$domain.error.log warn;
}

# HTTP to HTTPS redirect for all domains
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    server_name ~^(?<subdomain>[^.]+)\.(?<domain>.+)$;
    
    return 301 https://$subdomain.$domain$request_uri;
}

# Handle apex domains (redirect to www or handle separately)
server {
    listen 80;
    listen [::]:80;
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    
    server_name ~^(?<domain>[^.]+\.[^.]+)$;
    
    # Default SSL
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    
    # Try domain-specific certificate
    ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem;
    
    return 301 https://www.$domain$request_uri;
}